/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagFlowPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DeleteListModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, plugin) {
    super(app);
    this.plugin = plugin;
  }
  getItems() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    return activeView ? this.plugin.lists.filter((list) => list.notePath === activeView.file.path) : [];
  }
  getItemText(item) {
    console.log("Item ID:", item.id);
    return `${item.tag} (ID: ${item.id})`;
  }
  onChooseItem(item) {
    this.plugin.deleteList(item);
  }
};
var TagSuggester = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, plugin, tags) {
    super(app);
    this.tags = tags;
    this.plugin = plugin;
  }
  getItems() {
    return this.tags;
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item) {
    this.plugin.handleTagSelection(item);
  }
};
var TagFlowPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.allTags = [];
    this.lists = [];
  }
  async onload() {
    console.log("Plugin loaded");
    this.allTags = await this.fetchAllTags();
    this.registerCodeMirror((cm) => {
      cm.on("change", this.handleFileChange.bind(this));
    });
    this.addCommand({
      id: "delete-current-list",
      name: "Delete Current List",
      callback: () => new DeleteListModal(this.app, this).open()
    });
    this.addCommand({
      id: "open-tag-flow",
      name: "Open Tag Flow",
      callback: () => this.createTagList()
    });
    this.app.workspace.on("active-leaf-change", () => {
      this.updateLists();
    });
    this.app.workspace.on("layout-change", () => {
      if (this.app.workspace.getLeavesOfType("graph").length > 0) {
        this.updateLists();
      }
    });
    setInterval(() => {
      this.updateLists();
    }, 60 * 60 * 1e3);
    this.app.workspace.onLayoutReady(() => {
      this.loadData();
    });
    this.updateLists();
  }
  async deleteList(list) {
    let note = this.app.vault.getAbstractFileByPath(list.notePath);
    let content = await this.app.vault.read(note);
    const startAnchor = `<!--tag-list ${list.tag} ${list.id}-->`;
    const endAnchor = `<!--end-tag-list ${list.tag} ${list.id}-->`;
    const startIndex = content.indexOf(startAnchor);
    const endIndex = content.indexOf(endAnchor);
    if (startIndex >= 0) {
      if (endIndex >= 0) {
        content = content.substring(0, startIndex) + content.substring(endIndex + endAnchor.length);
      } else {
        const nextLineIndex = content.indexOf("\n", startIndex);
        content = content.substring(0, startIndex) + content.substring(nextLineIndex + 1);
      }
      await this.app.vault.modify(note, content);
      this.lists = this.lists.filter((l) => l !== list);
      await this.saveData();
    }
  }
  async fetchAllTags() {
    const allTags = /* @__PURE__ */ new Set();
    for (const file of this.app.vault.getMarkdownFiles()) {
      const fileContent = await this.app.vault.cachedRead(file);
      const tagRegex = /#([a-zA-Z0-9_-]+)/g;
      let match;
      while (match = tagRegex.exec(fileContent)) {
        allTags.add(match[1]);
      }
    }
    return Array.from(allTags);
  }
  async createTagList() {
    this.allTags = await this.fetchAllTags();
    if (this.allTags.length > 0) {
      new TagSuggester(this.app, this, this.allTags).open();
    }
  }
  async handleTagSelection(tag) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const activeEditor = activeView.editor;
      const cursor = activeEditor.getCursor();
      const id = Date.now();
      activeEditor.replaceRange(`<!--tag-list #${tag} ${id}-->
<!--end-tag-list #${tag} ${id}-->
`, cursor);
      this.lists.push({
        tag: `#${tag}`,
        notePath: activeView.file.path,
        id
      });
      await this.updateLists();
      await this.saveData();
    }
  }
  async handleFileChange(change) {
    const file = this.app.vault.getAbstractFileByPath(change.doc.file.path);
    if (file instanceof import_obsidian.TFile) {
      this.allTags = await this.fetchAllTags();
      const content = await this.app.vault.read(file);
      if (content.includes("<!--tag-list")) {
        await this.updateLists();
      }
    }
  }
  async updateLists() {
    if (!this.lists.length) {
      return;
    }
    for (let list of this.lists) {
      const filesWithTag = (await Promise.all(
        this.app.vault.getMarkdownFiles().map(async (file) => {
          const content2 = await this.app.vault.read(file);
          return content2.includes(list.tag) ? file : null;
        })
      )).filter(Boolean);
      const links = filesWithTag.map((file) => `[[${file.basename}]]`).join("\n");
      let note = this.app.vault.getAbstractFileByPath(list.notePath);
      let content = await this.app.vault.read(note);
      const startAnchor = `<!--tag-list ${list.tag} ${list.id}-->`;
      const endAnchor = `<!--end-tag-list ${list.tag} ${list.id}-->`;
      const startIndex = content.indexOf(startAnchor);
      const endIndex = content.indexOf(endAnchor);
      if (startIndex >= 0) {
        if (endIndex >= 0) {
          content = content.substring(0, startIndex) + startAnchor + "\n" + links + "\n" + endAnchor + content.substring(endIndex + endAnchor.length);
        } else {
          content = content.substring(0, startIndex) + startAnchor + "\n" + links + "\n" + endAnchor + content.substring(startIndex + startAnchor.length);
        }
        await this.app.vault.modify(note, content);
      }
    }
  }
  async saveData() {
    const data = {
      lists: this.lists.map((list) => ({ tag: list.tag, notePath: list.notePath, id: list.id }))
    };
  }
  async loadData() {
    try {
      const content = await this.app.vault.adapter.read("tagFlowData.json");
      const data = JSON.parse(content);
      this.lists = data.lists.map((listData) => ({ tag: listData.tag, notePath: listData.notePath, id: listData.id }));
    } catch (error) {
      console.error("Failed to load data:", error);
    }
  }
  onunload() {
    console.log("unloading plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
